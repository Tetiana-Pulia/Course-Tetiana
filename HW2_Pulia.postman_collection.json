{
	"info": {
		"_postman_id": "edccf507-7c21-4cd6-aa58-60008174e97f",
		"name": "HW2_Pulia",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP1: first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP2: user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос +//\r",
							"//2. Статус код 200 //\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.//\r",
							"let jsonData = pm.response.json(); //спарсить response body в json. //\r",
							"\r",
							"//4.Проверить, что name в ответе равно name s request (name вбить руками.) //\r",
							"pm.test(\"Check the name manually\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(\"Svitlana\");\r",
							"});\r",
							"\r",
							"//5.Проверить, что age в ответе равно age s request (age вбить руками.) //\r",
							"pm.test(\"Check the age manually\", function() {\r",
							"    pm.expect(+jsonData.age).to.eql(49);\r",
							"});\r",
							"\r",
							"//6.Проверить, что salary в ответе равно salary s request (salary вбить руками.) //\r",
							"pm.test(\"Check the salary manually\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.  //\r",
							"let reqpost = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.) //\r",
							"pm.test(\"Check the name from request\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqpost.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.) //\r",
							"pm.test(\"Check the age from request\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqpost.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.//\r",
							"pm.test(\"Check the salary from request\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqpost.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.//\r",
							"console.log(\"Family consists of\",jsonData.family);\r",
							"\r",
							"//12.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request) //\r",
							"pm.test(\"Check the multiplied salary from request\", function() {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqpost.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Svitlana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "49",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP3: object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос. Done//\r",
							"\r",
							"//2. Статус код 200 //\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.//\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.// \r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)// \r",
							"pm.test(\"Check the name in reponse is equal to the name from request\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.) //\r",
							"pm.test(\"Check that age in response is equal to age from request\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) \r",
							"pm.test(\"Check that salary in seponse is equal to salary from request\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response. //\r",
							"console.log(\"Family includes \", jsonData.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name. //\r",
							"pm.test(\"Check that dog parameter has the parameter name. Version1\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.any.keys(\"name\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check that dog parameter has the parameter name. Version2\", function() {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.//\r",
							"var dog = jsonData.family.pets.dog\r",
							"//потом использую эту переменную в пунктах 10-12!//\r",
							"pm.test(\"Check that dog parameter has parameter age.Version1\", function() {\r",
							"    pm.expect(dog).to.have.any.keys(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that dog parameter has parameter age. Version2\", function() {\r",
							"    pm.expect(dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11.Проверить, что параметр name имеет значение Luky. //\r",
							"pm.test(\"Check that parameter name has the value Lucky\", function () {\r",
							"    pm.expect(dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4. \r",
							"pm.test(\"Check that the parameter age has the value 4\", function() {\r",
							"    pm.expect(dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Olivia&age=18&salary=800",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olivia"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP4: object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200 //\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3.Спарсить response body в json.// \r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.// \r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//5.Проверить, что name в ответе равно name s request (name забрать из request.) //\r",
							"pm.test(\"Check the name from request\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6.Проверить, что age в ответе равно age из request (age забрать из request.) //\r",
							"pm.test(\"Check the age from request\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//7.Вывести в консоль параметр salary из request. //\r",
							"console.log(\"Salary is equal \" + req.salary);\r",
							"\r",
							"//8.Вывести в консоль параметр salary из response. //\r",
							"console.log(\"Salary is equal \" + jsonData.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response. //\r",
							"console.log(\"Salary_0 is equal \" + jsonData.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.//\r",
							"console.log(\"Salary_1 is equal \" + jsonData.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.//\r",
							"console.log(\"Salary_2 is equal \" + jsonData.salary[2]);\r",
							"\r",
							"//12.Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)//\r",
							"pm.test(\"Check that salary_0 is equal to salary from request\", function() {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.) \r",
							"pm.test(\"Check that salary_1 is equal to salary from request * 2 \", function() {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(+req.salary * 2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.) //\r",
							"pm.test(\"Check that salary_2 is equal to salary from request * 3\", function() {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary * 3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//Environment - Add a new variable - name - Save//\r",
							"\r",
							"//16. Создать в окружении переменную age //\r",
							"//Environment - Add a new variable - age - Save//\r",
							"\r",
							"//17. Создать в окружении переменную salary \r",
							"//Environment - Add a new variable - age - Save//\r",
							"\r",
							"//18. Передать в окружение переменную name//\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"//19. Передать в окружение переменную age \r",
							"pm.environment.set(\"age\",req.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary \r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.//\r",
							"for (let i = 0; i < jsonData.salary.length; i++) {\r",
							"    console.log(\"Cycle for element with number \" + i + \" \" + jsonData.salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Tania&age=36&salary=8000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tania"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "8000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep5: user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Вставить параметр salary из окружения в request. Руками в вкладке body - params - {{salary}}\r",
							"  2. Вставить параметр age из окружения в age. Руками в вкладке body - params - {{age}}\r",
							"  3. Вставить параметр name из окружения в name. Руками в вкладке body - params - {{name}}\r",
							" 4. Отправить запрос. Done*/\r",
							"\r",
							"//5.Статус код 200//\r",
							"pm.test(\"Satus code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*6. Спарсить response body в json.*/ \r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"/*7. Спарсить request. */\r",
							"let req = request.data;\r",
							"\r",
							"/*8. Проверить, что json response имеет параметр start_qa_salary */\r",
							"pm.test(\"Check that response has the parameter start_qa_salary. Version1\", function() {\r",
							"    pm.expect(jsonData).to.have.any.keys(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response has the parameter sart_qa_salary.Version2\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"/*9. Проверить, что json response имеет параметр qa_salary_after_6_months */\r",
							"pm.test(\"Check that response has the parameter qa_salary_after_6_months. V-1\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response has the parameter qa_salary_after_6_months. V-2\", function() {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"/*10. Проверить, что json response имеет параметр qa_salary_after_12_months */\r",
							"pm.test(\"Check that response has the parameter qa_salary_after_12_months. V-1\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys(\"qa_salary_after_12_months\");\r",
							"})\r",
							"\r",
							"pm.test(\"Check that the response has the parameter qa_salary_after_12_months. V-2\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"/*11. Проверить, что json response имеет параметр qa_salary_after_1.5_year */\r",
							"pm.test(\"Check that response has the parameter qa_salary_after_1.5_year. V1\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response has the parameter qa_salary_after_1.5_year. V2\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"/*12. Проверить, что json response имеет параметр qa_salary_after_3.5_years*/\r",
							"pm.test(\"Check that response has the parameter qa_salary_after_3.5_years. V1\", function() {\r",
							"    pm.expect(jsonData).to.have.any.keys(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response has the parameter qa_salary_after_3.5_years. V1\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"/*13. Проверить, что json response имеет параметр person*/\r",
							"pm.test(\"Check that response has the parameter person. V1\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that response has the parameter person. V2\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"/*14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.) */\r",
							"pm.test(\"Check that start_qa_salary is equal to salary from request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"/*15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)*/\r",
							"pm.test(\"Check that qa_salary_after_6_months is equal to salary*2 from request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary *2);\r",
							"})\r",
							"\r",
							"/*16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)*/\r",
							"pm.test(\"Check that qa_salary_after_12_months is equal to salary*2.7 from request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary * 2.7);\r",
							"});\r",
							"\r",
							"/*17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.) */\r",
							"pm.test(\"Check that qa_salary_after_1.5_year is equal to salary * 3.3 from request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary * 3.3);\r",
							"});\r",
							"/*тут в квадратних дужках, бо в значенні параметру є крапка, тому починається збій, нівелюю це квадратними дужками та лапками довкола всієї назви параметру*/\r",
							"\r",
							"/*18.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.) */\r",
							"pm.test(\"Check that qa_salary_after_3.5_years is equal to salary * 3.8 from request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary * 3.8);\r",
							"});\r",
							"\r",
							"/*19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.) */\r",
							"pm.test(\"Check that the first element from the person parameter is equal to salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"/*20. Проверить, что что параметр u_age равен age из request (age забрать из request.) */\r",
							"pm.test(\"Check that u_age parameter is equal to age from request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"})\r",
							"\r",
							"/*21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)*/\r",
							"pm.test(\"Check that u_salary_5_years parameter is equal to salary * 4.2 from request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary * 4.2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}