{
	"info": {
		"_postman_id": "4e44e53a-f973-49a4-bc5d-60865eef0f85",
		"name": "HW3_Pulia",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP1 login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"pm.environment.set(\"token\", jsonData.token)\r",
							"\r",
							"/*передать токен в окружение*/\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "tania34",
							"type": "text"
						},
						{
							"key": "password",
							"value": "93853495",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP2: user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Проверка статус код 200.*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*2. Проверка структуры json в ответе. */\r",
							"let jsonData = pm.response.json();\r",
							"let req = JSON.parse(request.data);\r",
							"/*просто парсим ответ и запрос (добавили еще json parse, потому что request у нас raw json, а не просто парметры*/\r",
							"let schema = {\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"/*3.В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент*/\r",
							"pm.test(\"Check that salary from request is equal to salary in response\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that qa_salary_after_6_months is equal to salary * 2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that qa_salary_after_12_months is equal to salary * 2.9\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary * 2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that u_salary_1.5_year is equal to salary * 4\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(req.salary * 4)\r",
							"});\r",
							"\r",
							"/*4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user */\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 35,\r\n    \"salary\": 400,\r\n    \"name\": \"lesia\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP3: new data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1) Статус код 200 */\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*2) Проверка структуры json в ответе. */\r",
							"let jsonData = pm.response.json();\r",
							"let req = request.data;\r",
							"/*спарсим ответ и запрос*/\r",
							"\r",
							"pm.environment.set(\"name\", req.name);\r",
							"pm.environment.set(\"age\", req.age)\r",
							"/*set variables to the environment*/\r",
							"\r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"/*3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент. */\r",
							"pm.test(\"Check that salalry in response is equal to salary in request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"pm.test(\"Check that salary_1 is equal to salalry *2 from request\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary *2);\r",
							"});\r",
							"pm.test(\"Check that salary_2 is equal to salary *3 from request\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary * 3);\r",
							"});\r",
							"\r",
							"/*4) проверить, что 2-й элемент массива salary больше 1-го и 0-го */\r",
							"pm.test(\"Check that second element of the salary array is bigger than the zero one\", function () {\r",
							"    pm.expect(jsonData.salary[2] > jsonData.salary[0]).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Check that second element of the salary array is bigger than the first one\", function () {\r",
							"    pm.expect(jsonData.salary[2] > jsonData.salary[1]).to.be.true;\r",
							"});\r",
							"\r",
							"/*OR*/\r",
							"\r",
							"pm.test('Check that second element of the salary array is bigger than the zero and first one', function () {\r",
							"    pm.expect(jsonData.salary[0] < jsonData.salary[1] < jsonData.salary[2]).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Inna",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP4:test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1) Статус код 200 */\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*2) Проверка структуры json в ответе.*/\r",
							"let jsonData = pm.response.json();\r",
							"let req = request.data;\r",
							"\r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"/* 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент*/\r",
							"pm.test(\"Check that daily_food is equal to weight * 0.012\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(req.weight * 0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that daily_sleep is equal to weight * 2.5\", function() {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(req.weight * 2.5)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "20",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP5: get test user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"let req = request.data\r",
							"/*parse response and request*/\r",
							"\r",
							"/*1) Статус код 200 */\r",
							"pm.test(\"Check status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*2) Проверка структуры json в ответе.*/ \r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"/*3) Проверить что занчение поля name = значению переменной name из окружения */\r",
							"pm.test(\"Check that value of the name is the same as the name from the environment\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"/*4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age */\r",
							"pm.test(\"Check that age is the same as age in environment\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(pm.environment.get(\"age\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		}
	]
}