/* 1. Можно ли со значениями с типом данных INT, FLOAT или DOUBLE совершать математические операции?*/
/* Да, ведь это числовой формат данных.*/

/* 2.Можно ли просуммировать значения с типом данных CHAR или VARCHAR?*/
/* Нет, потому что это строковый, а не числовой формат данных./*

/* 3. Напишите запрос, который поменяет имя клиента с номером паспорта 7053568777 на Марк.*/
UPDATE customer
SET first_name = 'Mark'
WHERE passport_number = 7053568777;

/*4. Напишите запрос, который поменяет номер паспорта клиента Luna с положительного на отрицательный. В качестве условия WHERE внесите сам номер паспорта.*/
UPDATE customer
SET passport_number = -1112545331
WHERE passport_number = 1112545331;

/*5. В качестве тренировки напишите запрос, который поменяет в таблице клиенты номер паспорта 3380900033 (integer) на слово 'passport'. Посмотрите на описание ошибки.*/
UPDATE customer
SET passport_number = 'passport'
WHERE passport_number = 3380900033;

/* такая ошибка выводится: Error code: 1366. Incorrect integer value*/

/*6. Ситуация (задание под пунктом номер 4):
Представьте, что мы хотим изменить service_id c 88 на 100 в таблице operation.
Для начала просто посмотрите на всю таблицу operation, чтобы понять, что я имею ввиду.
Запустите следующую команду: UPDATE operation SET service_id = 100 WHERE service_id = 88; и посмотрите на ошибку:
Напишите запрос (укажите его в ответе), который поменяет service_id c 88 на 100 не в дочерней таблице operation, а в родительской таблице service.
Проверьте, что изменение прошло (посмотрите на таблицу service). А теперь посмотрите, что автоматически произошло с таблицей operation.
Верните всё как было. (проверяется только 4й пункт)*/
UPDATE service
SET service_id = 100
WHERE service_id = 88;

/* 7. Напишите запрос для выключения функции autocommit.*/
SET autocommit = 0;

/* 8. Если запустить ряд следующих запросов, можно ли будет отменить внесенные изменения?
BEGIN;
SET autocommit = 1;
UPDATE car SET model = 'X5' WHERE car_owner = 7053568777;*/
/* Нет, потому что включен автокоммит.*/

/* 9. Напишите запрос, который отменит текущие изменения:
BEGIN;
SET autocommit = 0;
UPDATE car SET model = 'X5' WHERE car_owner = 7053568777;*/
ROLLBACK;

/* 10. Напишите запрос, который используется для того, чтобы закоммитить произведенные изменения :)*/
COMMIT;

/* 11. Если запустить ряд следующих запросов, можно ли будет отменить внесенные изменения?
BEGIN;
SET autocommit = 0;
DROP SCHEMA voitixler;
ROLLBACK;*/
/*Нет, потому что инструкцию DROP нельзя откатить, даже если и был отключен автокоммит.*/

/* 12. Напишите запрос, который поставит точку сохранения под названием last_name_update.*/
SAVEPOINT last_name_update;

/* 13. Напишите запрос, с помощью которого можно перескочить к точке сохранения last_name_update.*/
ROLLBACK TO last_name_update;

/*14. Напишите запрос, который внесет в таблицу с двигателями еще один двигатель - объемом 6.2, c номером RRR555, производства Russia, 2017ого года выпуска (обратите внимание на типы данных).*/
INSERT INTO car_engine
VALUES ('RRR555', 6.2, 'Russia', '2017');

/* 15. Напишите запрос для внесения автомобиля Volkswagen Golf, принадлежащий клиенту с номером паспорта 2202563342 (Гермионе), c номерным знаком e888xx23, номер двигателя неизвестен*/
INSERT INTO car
VALUES ('e888xx23', 'Volkswagen', 'Golf', NULL, 2202563342);

/*16. Напишите запрос, который покажет все автомобили (со всеми столбцами), которые принадлежат Гермионе (поиск по ее имени). Используйте джойн.*/
SELECT * FROM car
JOIN customer
ON car.car_owner = customer.passport_number
WHERE first_name = 'Hermione';

/* 17. напишите запрос, который внесет в таблицу автомобили только два значения: номерной знак е888хх24 и владелец автомобиля 2202563342.*/
INSERT INTO car(plate_number, car_owner)
VALUES ('е888хх24', 2202563342);

/* 18. Напишите запрос для таблицы с автомобильными двигателями, которая заменит неправильно указанное значение 'NULL' на значение NULL для двигателя с номером R28TT1A23400022.
Вспомним почему неправильное - потому что NULL не имеет никакого типа данных, а здесь оно записано в кавычках, приобретя тем самым строковый тип. Такое значение не будет найдено через выражение 'IS NULL' или 'IS NOT NULL'*/
UPDATE car_engine
SET origin = NULL
WHERE engine_number = 'R28TT1A23400022';

/*19. Напишите запрос для удаления таблицы услуги.*/
DROP TABLE service;

/*20. Напишите запрос для того, чтобы посмотреть перечень таблиц в текущей базе данных.*/
SHOW tables;

/* 21. Напишите запрос для изменения модели автомобиля с Corolla на Carina для клиента с номером паспорта 3380900033.*/
UPDATE car
SET model = 'Carina'
WHERE car_owner = 3380900033;

/*22. Напишите запрос для удаления автомобиля из таблицы car, у которого номер паспорта владельца равен 7053568777. Запустите, посмотрите на описание ошибки - этот автомобиль является родительским для строк в таблице operation. И пока не будут удалены операции с этим автомобилем, мы не может удалить сам автомобиль.*/
DELETE FROM car
WHERE car_owner = 7053568777;
/*Описание ошибки: Cannot delete or update a parent row: a foreign key constraint falls*/

/* 23. Продолжение задания №5. Напишите запрос для удаления операций из таблицы operation, где автомобильный номер равен a345xa150. Обратите внимание на количество удаленных строк. p.s. Теперь вы можете заново запустить запрос из задания №5. Обратите внимание на количество удаленных строк.*/
DELETE FROM operation
WHERE plate_number = 'a345xa150';

/* 24. Создайте у себя те же таблицы, как описано на картинке https://voitixler.ru/media/attachments/Tables_from_the_task.png*/
CREATE SCHEMA test_tetiana_db;

CREATE TABLE test_tetiana_db.employee (
id INT PRIMARY KEY auto_increment,
name_employee VARCHAR(50),
position_id INT);

INSERT INTO test_tetiana_db.employee (name_employee, position_id)
VALUES 
('Владимир', 1),
('Татьяна', 2),
('Александр', 6),
('Борис', 2);

CREATE TABLE test_tetiana_db.position (
id INT PRIMARY KEY auto_increment,
position_name VARCHAR(50));

INSERT INTO test_tetiana_db.position (position_name)
VALUES 
('Дизайнер'),
('Редактор'),
('Программист');



